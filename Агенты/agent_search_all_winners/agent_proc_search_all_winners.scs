agent_proc_search_all_winners
// Множество идентификаторов
=>nrel_main_idtf:
	[Агентная scp-программа поиска афиши фестиваля]
	(* <- lang_ru;; *);
	[Agent scp-program of search actual state of object]
	(* <- lang_en;; *);
<- agent_scp_program;;
// Указываем, что программа является агентной scp-программой
scp_program ->agent_proc_search_all_winners
(*
	// Множество параметров агентной программы
	->rrel_params: .agent_proc_search_all_winners_params
	(*
		-> rrel_1: rrel_in: _event;;
		-> rrel_2: rrel_in: _input_arc;;
	*);;
	// Множество операторов агентной программы
	->rrel_operators: .agent_proc_search_all_winners_operator_set
	(*
		// Первый исполняемый оператор программы
		->rrel_init: .agent_proc_search_all_winners_operator1
		(*
			<- searchElStr3;;
			-> rrel_1: rrel_assign: rrel_scp_var: _temp;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _quest;;
			=>nrel_goto: .agent_proc_search_all_winners_operator2;;
		*);;
		// В rrel_1 устанавливаем имя придуманного нами класса вопросов (см. пункт 2.1).
		// Агент будет просыпаться, только когда обнаружит наш вопрос.
		-> .agent_proc_search_all_winners_operator2
		(*
			<- searchElStr3;;
			->rrel_1: rrel_fixed: rrel_scp_const: question_search_all_winners;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;
			=>nrel_then: .agent_proc_search_all_winners_operator3_1;;
			=>nrel_else: .agent_proc_search_all_winners_operator_return;;
		*);;
		// Найдём параметр запроса – его подал на вход сам пользователь
		-> .agent_proc_search_all_winners_operator3_1
		(*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc3_1_1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _param1;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc3_1_2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
			=>nrel_then: .agent_proc_search_all_winners_operator3_2;;
			=>nrel_else: .agent_proc_search_all_winners_operator_return;;
		*);;
		-> .agent_proc_search_all_winners_operator3_2
		(*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc3_2_1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _param2;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc3_2_2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;
			=>nrel_then: .agent_proc_search_all_winners_operator4;;
			=>nrel_else: .agent_proc_search_all_winners_operator_return;;
		*);;
		// Сгенерировать узел, в который мы поместим конструкцию ответа
		-> .agent_proc_search_all_winners_operator4
		(*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _answer;;
			=>nrel_goto: .agent_proc_search_all_winners_operator5;;
		*);;
		-> .agent_proc_search_all_winners_operator5
		(*
			<- call;;// В первом параметре содержится название вызванной процедуры
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_search_all_winners;;
			->rrel_2:rrel_fixed:rrel_scp_const:
			// здесь описаны параметры, подаваемые на вход процедуре
			.agent_proc_search_all_winners_operator5_params
			(*
				-> rrel_1: rrel_fixed: rrel_scp_var: _param1;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _param2;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _answer;;
			*);;
			// Знак scp-процесса, который может быть использован для того, чтобы
			// дождаться завершения созданного scp-процесса
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=>nrel_goto: .agent_proc_search_all_winners_operator6;;
		*);;
		// scp-оператор ожидания завершения выполнения подпрограммы
		-> .agent_proc_search_all_winners_operator6
		(*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=>nrel_goto: .agent_proc_search_all_winners_operator_gen_answer;;
		*);;
		// Связываем ответ и вопрос отношением ответ*
		-> .agent_proc_search_all_winners_operator_gen_answer
		(*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
			-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _answer;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_answer;;
			=>nrel_goto: .agent_proc_search_all_winners_operator_return;;
		*);;
		// Оператор завершения агентной программы
		-> .agent_proc_search_all_winners_operator_return
		(*
			<- return;;
		*);;
	*);;
*);;
